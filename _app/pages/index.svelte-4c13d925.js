import{C as Ht,S as Wl,i as Hl,n as Sl,M as Tl,e as t,t as o,j as u,h as $l,c as s,a as n,g as l,d as a,m as i,l as Nl,b as p,K as D,f as jo,F as e,o as Ll,L as Il,s as Ee,x as Gl,u as Fl,v as Bl,N as _e,O as jl,P as Vl}from"../chunks/vendor-c5ea6b8b.js";const Bn=k=>{let c=!1;const f={value:k},h={value:k},{subscribe:E,set:_}=Ht(f);return{subscribe:E,mutate:b=>{b&&b(k),_((c=!c)?h:f)},swap:b=>{k=f.value=h.value=b,_((c=!c)?h:f)}}},Ul=k=>{const{subscribe:c,set:f}=Ht({value:k});return{subscribe:c,mutate:h=>{h&&h(k),f({value:k})},swap:h=>{k=h,f({value:k})}}},Yl='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',ql=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,zl=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Jl='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Kl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Ql=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,Xl='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Zl=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,xl=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,ep='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',ap=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,tp=`mutableMap<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,sp='<span class="token keyword">const</span> safeMutableMap <span class="token operator">=</span> <span class="token function">safeMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',np=`$safeMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,op=`safeMutableMap<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,lp='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',pp=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,cp=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,rp='<span class="token keyword">const</span> mutableMapSwap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',up=`$mutableMapSwap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,ip=`<span class="token keyword">const</span> nextRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$mutableMapSwap<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
nextRef<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> nextRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapSwap<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>nextRef<span class="token punctuation">)</span><span class="token punctuation">;</span>`;var w={ADef:Yl,ARead:ql,AWrite:zl,BDef:Jl,BRead:Kl,BWrite:Ql,CDef:Xl,CRead:Zl,CWrite:xl,DDef:ep,DRead:ap,DWrite:tp,EDef:sp,ERead:np,EWrite:op,FDef:lp,FRead:pp,FWrite:cp,GDef:rp,GRead:up,GWrite:ip};function kp(k){let c,f,h,E,_;return{c(){c=t("div"),f=o("in the examples below, notice that you need to access "),h=t("code"),E=o(".value"),_=o(" for reads, unlike above")},l(b){c=s(b,"DIV",{});var m=n(c);f=l(m,"in the examples below, notice that you need to access "),h=s(m,"CODE",{});var C=n(h);E=l(C,".value"),C.forEach(a),_=l(m," for reads, unlike above"),m.forEach(a)},m(b,m){jo(b,c,m),e(c,f),e(c,h),e(h,E),e(c,_)},d(b){b&&a(c)}}}function dp(k){let c,f,h,E,_,b,m,C,ge,T,P,V,Me,fe,$,he,be,q,at,v,U,St,we,Tt,$t,z,Nt,ga,Lt,It,Gt,R,De,Vo=w.ADef+"",Ft,J,K,Ce,Ma=k[0].get("a")+"",tt,Bt,Pe,Uo=w.ARead+"",jt,N,Vt,Da,Ut,Yt,Ca,qt,zt,Jt,Re,Yo=w.AWrite+"",Kt,Q,Qt,Pa,Xt,Zt,xt,y,ye,qo=w.BDef+"",es,X,Z,Ae,Ra=k[1].get("a")+"",st,as,Oe,zo=w.BRead+"",ts,L,ss,ya,ns,os,We,Aa,ls,ps,cs,He,Jo=w.BWrite+"",rs,Se,x,us,I,is,Oa,ks,ds,Wa,vs,fs,hs,A,Te,Ko=w.CDef+"",bs,ee,ae,$e,Ha=k[4].value.get("a")+"",nt,ws,Ne,Qo=w.CRead+"",ms,te,Es,Sa,_s,gs,Ms,Le,Xo=w.CWrite+"",Ds,se,Cs,Ta,Ie,Ps,Rs,ys,O,Ge,Zo=w.DDef+"",As,ne,oe,Fe,$a=k[5].value.get("a")+"",ot,Os,Be,xo=w.DRead+"",Ws,G,Hs,Na,je,Ss,Ts,La,$s,Ns,Ls,Ve,el=w.DWrite+"",Is,le,Gs,Ia,Ue,Fs,Bs,js,W,Ye,al=w.EDef+"",Vs,pe,ce,qe,Ga=k[6].value.get("a")+"",lt,Us,ze,tl=w.ERead+"",Ys,g,qs,Fa,Je,zs,Js,Ba,Ke,Ks,Qs,ja,Xs,Zs,Va,xs,en,an,Qe,sl=w.EWrite+"",tn,re,sn,Ua,Xe,nn,on,ln,Ze,nl=w.FDef+"",pn,Y,ue,ie,xe,Ya=k[2].value.get("a")+"",pt,cn,ea,ol=w.FRead+"",rn,F,un,qa,aa,kn,dn,za,vn,fn,hn,ta,ll=w.FWrite+"",bn,ke,wn,Ja,sa,mn,En,_n,H,na,pl=w.GDef+"",gn,de,ve,oa,Ka=k[3].value.get("a")+"",ct,Mn,la,cl=w.GRead+"",Dn,M,Cn,Qa,Pn,Rn,Xa,yn,An,Za,On,Wn,xa,Hn,Sn,Tn,pa,rl=w.GWrite+"",$n,Nn,Ln,ca,et,ra,In,S,Gn,jn;return x=new Tl({props:{$$slots:{default:[kp]},$$scope:{ctx:k}}}),{c(){c=t("main"),f=t("header"),h=t("h1"),E=o("@feltcoop/svelte-mutable-store"),_=u(),b=t("section"),m=t("p"),C=t("a"),ge=o("Svelte"),T=o(` stores for mutable values with the
				`),P=t("a"),V=t("code"),Me=o("immutable"),fe=o(`
				compiler option \u2014
				`),$=t("a"),he=o("learn more on GitHub"),be=u(),q=t("pre"),at=o("npm i -D "),v=t("a"),U=o("@feltcoop/svelte-mutable-store"),St=u(),we=t("button"),Tt=o("click me to make number++ go up"),$t=u(),z=t("h2"),Nt=o("A. "),ga=t("code"),Lt=o("writable"),It=o(" store (broken! D:)"),Gt=u(),R=t("section"),De=t("pre"),Ft=u(),J=t("div"),K=t("p"),Ce=t("span"),tt=o(Ma),Bt=u(),Pe=t("span"),jt=u(),N=t("p"),Vt=o("Fails to update as a "),Da=t("code"),Ut=o("writable"),Yt=o(" store because "),Ca=t("code"),qt=o("immutable"),zt=o(` is enabled and
				we're mutating the map.`),Jt=u(),Re=t("pre"),Kt=u(),Q=t("h2"),Qt=o("B. "),Pa=t("code"),Xt=o("writable"),Zt=o(" store with cloning"),xt=u(),y=t("section"),ye=t("pre"),es=u(),X=t("div"),Z=t("p"),Ae=t("span"),st=o(Ra),as=u(),Oe=t("span"),ts=u(),L=t("p"),ss=o("Works for "),ya=t("code"),ns=o("Map"),os=o(`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for
				`),We=t("a"),Aa=t("code"),ls=o("WeakMap"),ps=o(", one of the motivating usecases for this library."),cs=u(),He=t("pre"),rs=u(),Se=t("section"),$l(x.$$.fragment),us=u(),I=t("h2"),is=o("C. "),Oa=t("code"),ks=o("derived"),ds=o(" from "),Wa=t("code"),vs=o("writable"),fs=o(" store"),hs=u(),A=t("section"),Te=t("pre"),bs=u(),ee=t("div"),ae=t("p"),$e=t("span"),nt=o(Ha),ws=u(),Ne=t("span"),ms=u(),te=t("p"),Es=o(`Works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; this is also error-prone because reading the `),Sa=t("code"),_s=o("writable"),gs=o(" isn't reactive!"),Ms=u(),Le=t("pre"),Ds=u(),se=t("h2"),Cs=o("D. "),Ta=t("code"),Ie=t("a"),Ps=o("mutable"),Rs=o(" store"),ys=u(),O=t("section"),Ge=t("pre"),As=u(),ne=t("div"),oe=t("p"),Fe=t("span"),ot=o($a),Os=u(),Be=t("span"),Ws=u(),G=t("p"),Hs=o("Works because it's a "),Na=t("code"),je=t("a"),Ss=o("mutable"),Ts=o(`
				store. Doesn't clone the map, but notice that you need to access `),La=t("code"),$s=o(".value"),Ns=o(" on reads."),Ls=u(),Ve=t("pre"),Is=u(),le=t("h2"),Gs=o("E. "),Ia=t("code"),Ue=t("a"),Fs=o("safeMutable"),Bs=o(" store"),js=u(),W=t("section"),Ye=t("pre"),Vs=u(),pe=t("div"),ce=t("p"),qe=t("span"),lt=o(Ga),Us=u(),ze=t("span"),Ys=u(),g=t("p"),qs=o("Works because it's a "),Fa=t("code"),Je=t("a"),zs=o("safeMutable"),Js=o(`
				store, which compared to
				`),Ba=t("code"),Ke=t("a"),Ks=o("mutable"),Qs=o(`
				is slightly less efficient because it creates a new reference on every change, unlike the regular
				`),ja=t("code"),Xs=o("mutable"),Zs=o(`
				which swaps between two stable object references; `),Va=t("code"),xs=o("safeMutable"),en=o(` composes better as
				an immutable value stream, but given that you're expected to mutate the store value, this is
				probably useful only in rare cases.`),an=u(),Qe=t("pre"),tn=u(),re=t("h2"),sn=o("F. "),Ua=t("code"),Xe=t("a"),nn=o("mutable"),on=o(" store with manual update"),ln=u(),Ze=t("pre"),pn=u(),Y=t("section"),ue=t("div"),ie=t("p"),xe=t("span"),pt=o(Ya),cn=u(),ea=t("span"),rn=u(),F=t("p"),un=o("Works because it's a "),qa=t("code"),aa=t("a"),kn=o("mutable"),dn=o(`
				store, but mutates the value directly and then manually calls `),za=t("code"),vn=o(".mutate()"),fn=o(` with no
				args, which may reduce readability with action-at-a-distance but is sometimes useful.`),hn=u(),ta=t("pre"),bn=u(),ke=t("h2"),wn=o("G. "),Ja=t("code"),sa=t("a"),mn=o("mutable"),En=o(" store with swapped value references"),_n=u(),H=t("section"),na=t("pre"),gn=u(),de=t("div"),ve=t("p"),oa=t("span"),ct=o(Ka),Mn=u(),la=t("span"),Dn=u(),M=t("p"),Cn=o("You can swap a "),Qa=t("code"),Pn=o("mutable"),Rn=o(` store reference in the rare cases that's useful. If this
				is the only way you're using `),Xa=t("code"),yn=o("mutable"),An=o(` and the values are used immutably, use a
				`),Za=t("code"),On=o("writable"),Wn=o(`
				instead, because the `),xa=t("code"),Hn=o("mutable"),Sn=o(" store has ergonomic and performance downsides."),Tn=u(),pa=t("pre"),$n=u(),Nn=t("hr"),Ln=u(),ca=t("footer"),et=t("p"),ra=t("a"),In=o("get the docs and public domain source code on GitHub"),this.h()},l(d){c=s(d,"MAIN",{class:!0});var r=n(c);f=s(r,"HEADER",{});var me=n(f);h=s(me,"H1",{class:!0});var Vn=n(h);E=l(Vn,"@feltcoop/svelte-mutable-store"),Vn.forEach(a),_=i(me),b=s(me,"SECTION",{class:!0});var rt=n(b);m=s(rt,"P",{});var ua=n(m);C=s(ua,"A",{href:!0});var Un=n(C);ge=l(Un,"Svelte"),Un.forEach(a),T=l(ua,` stores for mutable values with the
				`),P=s(ua,"A",{href:!0});var Yn=n(P);V=s(Yn,"CODE",{});var qn=n(V);Me=l(qn,"immutable"),qn.forEach(a),Yn.forEach(a),fe=l(ua,`
				compiler option \u2014
				`),$=s(ua,"A",{href:!0});var zn=n($);he=l(zn,"learn more on GitHub"),zn.forEach(a),ua.forEach(a),be=i(rt),q=s(rt,"PRE",{class:!0});var Fn=n(q);at=l(Fn,"npm i -D "),v=s(Fn,"A",{href:!0});var Jn=n(v);U=l(Jn,"@feltcoop/svelte-mutable-store"),Jn.forEach(a),Fn.forEach(a),rt.forEach(a),me.forEach(a),St=i(r),we=s(r,"BUTTON",{class:!0});var Kn=n(we);Tt=l(Kn,"click me to make number++ go up"),Kn.forEach(a),$t=i(r),z=s(r,"H2",{class:!0});var ut=n(z);Nt=l(ut,"A. "),ga=s(ut,"CODE",{});var Qn=n(ga);Lt=l(Qn,"writable"),Qn.forEach(a),It=l(ut," store (broken! D:)"),ut.forEach(a),Gt=i(r),R=s(r,"SECTION",{});var ia=n(R);De=s(ia,"PRE",{class:!0});var ul=n(De);ul.forEach(a),Ft=i(ia),J=s(ia,"DIV",{class:!0});var it=n(J);K=s(it,"P",{class:!0});var kt=n(K);Ce=s(kt,"SPAN",{class:!0});var Xn=n(Ce);tt=l(Xn,Ma),Xn.forEach(a),Bt=i(kt),Pe=s(kt,"SPAN",{class:!0});var il=n(Pe);il.forEach(a),kt.forEach(a),jt=i(it),N=s(it,"P",{class:!0});var ka=n(N);Vt=l(ka,"Fails to update as a "),Da=s(ka,"CODE",{});var Zn=n(Da);Ut=l(Zn,"writable"),Zn.forEach(a),Yt=l(ka," store because "),Ca=s(ka,"CODE",{});var xn=n(Ca);qt=l(xn,"immutable"),xn.forEach(a),zt=l(ka,` is enabled and
				we're mutating the map.`),ka.forEach(a),it.forEach(a),Jt=i(ia),Re=s(ia,"PRE",{class:!0});var kl=n(Re);kl.forEach(a),ia.forEach(a),Kt=i(r),Q=s(r,"H2",{class:!0});var dt=n(Q);Qt=l(dt,"B. "),Pa=s(dt,"CODE",{});var eo=n(Pa);Xt=l(eo,"writable"),eo.forEach(a),Zt=l(dt," store with cloning"),dt.forEach(a),xt=i(r),y=s(r,"SECTION",{});var da=n(y);ye=s(da,"PRE",{class:!0});var dl=n(ye);dl.forEach(a),es=i(da),X=s(da,"DIV",{class:!0});var vt=n(X);Z=s(vt,"P",{class:!0});var ft=n(Z);Ae=s(ft,"SPAN",{class:!0});var ao=n(Ae);st=l(ao,Ra),ao.forEach(a),as=i(ft),Oe=s(ft,"SPAN",{class:!0});var vl=n(Oe);vl.forEach(a),ft.forEach(a),ts=i(vt),L=s(vt,"P",{class:!0});var va=n(L);ss=l(va,"Works for "),ya=s(va,"CODE",{});var to=n(ya);ns=l(to,"Map"),to.forEach(a),os=l(va,`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for
				`),We=s(va,"A",{href:!0});var so=n(We);Aa=s(so,"CODE",{});var no=n(Aa);ls=l(no,"WeakMap"),no.forEach(a),so.forEach(a),ps=l(va,", one of the motivating usecases for this library."),va.forEach(a),vt.forEach(a),cs=i(da),He=s(da,"PRE",{class:!0});var fl=n(He);fl.forEach(a),da.forEach(a),rs=i(r),Se=s(r,"SECTION",{class:!0});var oo=n(Se);Nl(x.$$.fragment,oo),oo.forEach(a),us=i(r),I=s(r,"H2",{class:!0});var fa=n(I);is=l(fa,"C. "),Oa=s(fa,"CODE",{});var lo=n(Oa);ks=l(lo,"derived"),lo.forEach(a),ds=l(fa," from "),Wa=s(fa,"CODE",{});var po=n(Wa);vs=l(po,"writable"),po.forEach(a),fs=l(fa," store"),fa.forEach(a),hs=i(r),A=s(r,"SECTION",{});var ha=n(A);Te=s(ha,"PRE",{class:!0});var hl=n(Te);hl.forEach(a),bs=i(ha),ee=s(ha,"DIV",{class:!0});var ht=n(ee);ae=s(ht,"P",{class:!0});var bt=n(ae);$e=s(bt,"SPAN",{class:!0});var co=n($e);nt=l(co,Ha),co.forEach(a),ws=i(bt),Ne=s(bt,"SPAN",{class:!0});var bl=n(Ne);bl.forEach(a),bt.forEach(a),ms=i(ht),te=s(ht,"P",{class:!0});var wt=n(te);Es=l(wt,`Works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; this is also error-prone because reading the `),Sa=s(wt,"CODE",{});var ro=n(Sa);_s=l(ro,"writable"),ro.forEach(a),gs=l(wt," isn't reactive!"),wt.forEach(a),ht.forEach(a),Ms=i(ha),Le=s(ha,"PRE",{class:!0});var wl=n(Le);wl.forEach(a),ha.forEach(a),Ds=i(r),se=s(r,"H2",{class:!0});var mt=n(se);Cs=l(mt,"D. "),Ta=s(mt,"CODE",{});var uo=n(Ta);Ie=s(uo,"A",{href:!0});var io=n(Ie);Ps=l(io,"mutable"),io.forEach(a),uo.forEach(a),Rs=l(mt," store"),mt.forEach(a),ys=i(r),O=s(r,"SECTION",{});var ba=n(O);Ge=s(ba,"PRE",{class:!0});var ml=n(Ge);ml.forEach(a),As=i(ba),ne=s(ba,"DIV",{class:!0});var Et=n(ne);oe=s(Et,"P",{class:!0});var _t=n(oe);Fe=s(_t,"SPAN",{class:!0});var ko=n(Fe);ot=l(ko,$a),ko.forEach(a),Os=i(_t),Be=s(_t,"SPAN",{class:!0});var El=n(Be);El.forEach(a),_t.forEach(a),Ws=i(Et),G=s(Et,"P",{class:!0});var wa=n(G);Hs=l(wa,"Works because it's a "),Na=s(wa,"CODE",{});var vo=n(Na);je=s(vo,"A",{href:!0});var fo=n(je);Ss=l(fo,"mutable"),fo.forEach(a),vo.forEach(a),Ts=l(wa,`
				store. Doesn't clone the map, but notice that you need to access `),La=s(wa,"CODE",{});var ho=n(La);$s=l(ho,".value"),ho.forEach(a),Ns=l(wa," on reads."),wa.forEach(a),Et.forEach(a),Ls=i(ba),Ve=s(ba,"PRE",{class:!0});var _l=n(Ve);_l.forEach(a),ba.forEach(a),Is=i(r),le=s(r,"H2",{class:!0});var gt=n(le);Gs=l(gt,"E. "),Ia=s(gt,"CODE",{});var bo=n(Ia);Ue=s(bo,"A",{href:!0});var wo=n(Ue);Fs=l(wo,"safeMutable"),wo.forEach(a),bo.forEach(a),Bs=l(gt," store"),gt.forEach(a),js=i(r),W=s(r,"SECTION",{});var ma=n(W);Ye=s(ma,"PRE",{class:!0});var gl=n(Ye);gl.forEach(a),Vs=i(ma),pe=s(ma,"DIV",{class:!0});var Mt=n(pe);ce=s(Mt,"P",{class:!0});var Dt=n(ce);qe=s(Dt,"SPAN",{class:!0});var mo=n(qe);lt=l(mo,Ga),mo.forEach(a),Us=i(Dt),ze=s(Dt,"SPAN",{class:!0});var Ml=n(ze);Ml.forEach(a),Dt.forEach(a),Ys=i(Mt),g=s(Mt,"P",{class:!0});var B=n(g);qs=l(B,"Works because it's a "),Fa=s(B,"CODE",{});var Eo=n(Fa);Je=s(Eo,"A",{href:!0});var _o=n(Je);zs=l(_o,"safeMutable"),_o.forEach(a),Eo.forEach(a),Js=l(B,`
				store, which compared to
				`),Ba=s(B,"CODE",{});var go=n(Ba);Ke=s(go,"A",{href:!0});var Mo=n(Ke);Ks=l(Mo,"mutable"),Mo.forEach(a),go.forEach(a),Qs=l(B,`
				is slightly less efficient because it creates a new reference on every change, unlike the regular
				`),ja=s(B,"CODE",{});var Do=n(ja);Xs=l(Do,"mutable"),Do.forEach(a),Zs=l(B,`
				which swaps between two stable object references; `),Va=s(B,"CODE",{});var Co=n(Va);xs=l(Co,"safeMutable"),Co.forEach(a),en=l(B,` composes better as
				an immutable value stream, but given that you're expected to mutate the store value, this is
				probably useful only in rare cases.`),B.forEach(a),Mt.forEach(a),an=i(ma),Qe=s(ma,"PRE",{class:!0});var Dl=n(Qe);Dl.forEach(a),ma.forEach(a),tn=i(r),re=s(r,"H2",{class:!0});var Ct=n(re);sn=l(Ct,"F. "),Ua=s(Ct,"CODE",{});var Po=n(Ua);Xe=s(Po,"A",{href:!0});var Ro=n(Xe);nn=l(Ro,"mutable"),Ro.forEach(a),Po.forEach(a),on=l(Ct," store with manual update"),Ct.forEach(a),ln=i(r),Ze=s(r,"PRE",{class:!0});var Cl=n(Ze);Cl.forEach(a),pn=i(r),Y=s(r,"SECTION",{});var Pt=n(Y);ue=s(Pt,"DIV",{class:!0});var Rt=n(ue);ie=s(Rt,"P",{class:!0});var yt=n(ie);xe=s(yt,"SPAN",{class:!0});var yo=n(xe);pt=l(yo,Ya),yo.forEach(a),cn=i(yt),ea=s(yt,"SPAN",{class:!0});var Pl=n(ea);Pl.forEach(a),yt.forEach(a),rn=i(Rt),F=s(Rt,"P",{class:!0});var Ea=n(F);un=l(Ea,"Works because it's a "),qa=s(Ea,"CODE",{});var Ao=n(qa);aa=s(Ao,"A",{href:!0});var Oo=n(aa);kn=l(Oo,"mutable"),Oo.forEach(a),Ao.forEach(a),dn=l(Ea,`
				store, but mutates the value directly and then manually calls `),za=s(Ea,"CODE",{});var Wo=n(za);vn=l(Wo,".mutate()"),Wo.forEach(a),fn=l(Ea,` with no
				args, which may reduce readability with action-at-a-distance but is sometimes useful.`),Ea.forEach(a),Rt.forEach(a),hn=i(Pt),ta=s(Pt,"PRE",{class:!0});var Rl=n(ta);Rl.forEach(a),Pt.forEach(a),bn=i(r),ke=s(r,"H2",{class:!0});var At=n(ke);wn=l(At,"G. "),Ja=s(At,"CODE",{});var Ho=n(Ja);sa=s(Ho,"A",{href:!0});var So=n(sa);mn=l(So,"mutable"),So.forEach(a),Ho.forEach(a),En=l(At," store with swapped value references"),At.forEach(a),_n=i(r),H=s(r,"SECTION",{});var _a=n(H);na=s(_a,"PRE",{class:!0});var yl=n(na);yl.forEach(a),gn=i(_a),de=s(_a,"DIV",{class:!0});var Ot=n(de);ve=s(Ot,"P",{class:!0});var Wt=n(ve);oa=s(Wt,"SPAN",{class:!0});var To=n(oa);ct=l(To,Ka),To.forEach(a),Mn=i(Wt),la=s(Wt,"SPAN",{class:!0});var Al=n(la);Al.forEach(a),Wt.forEach(a),Dn=i(Ot),M=s(Ot,"P",{class:!0});var j=n(M);Cn=l(j,"You can swap a "),Qa=s(j,"CODE",{});var $o=n(Qa);Pn=l($o,"mutable"),$o.forEach(a),Rn=l(j,` store reference in the rare cases that's useful. If this
				is the only way you're using `),Xa=s(j,"CODE",{});var No=n(Xa);yn=l(No,"mutable"),No.forEach(a),An=l(j,` and the values are used immutably, use a
				`),Za=s(j,"CODE",{});var Lo=n(Za);On=l(Lo,"writable"),Lo.forEach(a),Wn=l(j,`
				instead, because the `),xa=s(j,"CODE",{});var Io=n(xa);Hn=l(Io,"mutable"),Io.forEach(a),Sn=l(j," store has ergonomic and performance downsides."),j.forEach(a),Ot.forEach(a),Tn=i(_a),pa=s(_a,"PRE",{class:!0});var Ol=n(pa);Ol.forEach(a),_a.forEach(a),$n=i(r),Nn=s(r,"HR",{}),Ln=i(r),ca=s(r,"FOOTER",{class:!0});var Go=n(ca);et=s(Go,"P",{});var Fo=n(et);ra=s(Fo,"A",{href:!0});var Bo=n(ra);In=l(Bo,"get the docs and public domain source code on GitHub"),Bo.forEach(a),Fo.forEach(a),Go.forEach(a),r.forEach(a),this.h()},h(){p(h,"class","svelte-w0k95e"),p(C,"href","https://svelte.dev"),p(P,"href","https://svelte.dev/docs#compile-time-svelte-compile"),p($,"href","https://github.com/feltcoop/svelte-mutable-store"),p(v,"href","https://www.npmjs.com/package/@feltcoop/svelte-mutable-store"),p(q,"class","panel-inset svelte-w0k95e"),p(b,"class","markup"),p(we,"class","svelte-w0k95e"),p(z,"class","svelte-w0k95e"),p(De,"class","panel-inset svelte-w0k95e"),p(Ce,"class","count svelte-w0k95e"),p(Pe,"class","read-example svelte-w0k95e"),p(K,"class","count-wrapper panel-outset svelte-w0k95e"),p(N,"class","count-label svelte-w0k95e"),p(J,"class","count-with-label svelte-w0k95e"),p(Re,"class","panel-inset svelte-w0k95e"),D(R,"--hue",k[14](k[0].get("a")),!1),p(Q,"class","svelte-w0k95e"),p(ye,"class","panel-inset svelte-w0k95e"),p(Ae,"class","count svelte-w0k95e"),p(Oe,"class","read-example svelte-w0k95e"),p(Z,"class","count-wrapper panel-outset svelte-w0k95e"),p(We,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap"),p(L,"class","count-label svelte-w0k95e"),p(X,"class","count-with-label svelte-w0k95e"),p(He,"class","panel-inset svelte-w0k95e"),D(y,"--hue",k[14](k[1].get("a")),!1),p(Se,"class","message svelte-w0k95e"),p(I,"class","svelte-w0k95e"),p(Te,"class","panel-inset svelte-w0k95e"),p($e,"class","count svelte-w0k95e"),p(Ne,"class","read-example svelte-w0k95e"),p(ae,"class","count-wrapper panel-outset svelte-w0k95e"),p(te,"class","count-label svelte-w0k95e"),p(ee,"class","count-with-label svelte-w0k95e"),p(Le,"class","panel-inset svelte-w0k95e"),D(A,"--hue",k[14](k[4].value.get("a")),!1),p(Ie,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/mutable.ts"),p(se,"class","svelte-w0k95e"),p(Ge,"class","panel-inset svelte-w0k95e"),p(Fe,"class","count svelte-w0k95e"),p(Be,"class","read-example svelte-w0k95e"),p(oe,"class","count-wrapper panel-outset svelte-w0k95e"),p(je,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/mutable.ts"),p(G,"class","count-label svelte-w0k95e"),p(ne,"class","count-with-label svelte-w0k95e"),p(Ve,"class","panel-inset svelte-w0k95e"),D(O,"--hue",k[14](k[5].value.get("a")),!1),p(Ue,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/safeMutable.ts"),p(le,"class","svelte-w0k95e"),p(Ye,"class","panel-inset svelte-w0k95e"),p(qe,"class","count svelte-w0k95e"),p(ze,"class","read-example svelte-w0k95e"),p(ce,"class","count-wrapper panel-outset svelte-w0k95e"),p(Je,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/safeMutable.ts"),p(Ke,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/mutable.ts"),p(g,"class","count-label svelte-w0k95e"),p(pe,"class","count-with-label svelte-w0k95e"),p(Qe,"class","panel-inset svelte-w0k95e"),D(W,"--hue",k[14](k[6].value.get("a")),!1),p(Xe,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/mutable.ts"),p(re,"class","svelte-w0k95e"),p(Ze,"class","panel-inset svelte-w0k95e"),p(xe,"class","count svelte-w0k95e"),p(ea,"class","read-example svelte-w0k95e"),p(ie,"class","count-wrapper panel-outset svelte-w0k95e"),p(aa,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/mutable.ts"),p(F,"class","count-label svelte-w0k95e"),p(ue,"class","count-with-label svelte-w0k95e"),p(ta,"class","panel-inset svelte-w0k95e"),D(Y,"--hue",k[14](k[2].value.get("a")),!1),p(sa,"href","https://github.com/feltcoop/svelte-mutable-store/blob/main/src/lib/mutable.ts"),p(ke,"class","svelte-w0k95e"),p(na,"class","panel-inset svelte-w0k95e"),p(oa,"class","count svelte-w0k95e"),p(la,"class","read-example svelte-w0k95e"),p(ve,"class","count-wrapper panel-outset svelte-w0k95e"),p(M,"class","count-label svelte-w0k95e"),p(de,"class","count-with-label svelte-w0k95e"),p(pa,"class","panel-inset svelte-w0k95e"),D(H,"--hue",k[14](k[3].value.get("a")),!1),p(ra,"href","https://github.com/feltcoop/svelte-mutable-store"),p(ca,"class","markup svelte-w0k95e"),p(c,"class","markup column svelte-w0k95e")},m(d,r){jo(d,c,r),e(c,f),e(f,h),e(h,E),e(f,_),e(f,b),e(b,m),e(m,C),e(C,ge),e(m,T),e(m,P),e(P,V),e(V,Me),e(m,fe),e(m,$),e($,he),e(b,be),e(b,q),e(q,at),e(q,v),e(v,U),e(c,St),e(c,we),e(we,Tt),e(c,$t),e(c,z),e(z,Nt),e(z,ga),e(ga,Lt),e(z,It),e(c,Gt),e(c,R),e(R,De),De.innerHTML=Vo,e(R,Ft),e(R,J),e(J,K),e(K,Ce),e(Ce,tt),e(K,Bt),e(K,Pe),Pe.innerHTML=Uo,e(J,jt),e(J,N),e(N,Vt),e(N,Da),e(Da,Ut),e(N,Yt),e(N,Ca),e(Ca,qt),e(N,zt),e(R,Jt),e(R,Re),Re.innerHTML=Yo,e(c,Kt),e(c,Q),e(Q,Qt),e(Q,Pa),e(Pa,Xt),e(Q,Zt),e(c,xt),e(c,y),e(y,ye),ye.innerHTML=qo,e(y,es),e(y,X),e(X,Z),e(Z,Ae),e(Ae,st),e(Z,as),e(Z,Oe),Oe.innerHTML=zo,e(X,ts),e(X,L),e(L,ss),e(L,ya),e(ya,ns),e(L,os),e(L,We),e(We,Aa),e(Aa,ls),e(L,ps),e(y,cs),e(y,He),He.innerHTML=Jo,e(c,rs),e(c,Se),Ll(x,Se,null),e(c,us),e(c,I),e(I,is),e(I,Oa),e(Oa,ks),e(I,ds),e(I,Wa),e(Wa,vs),e(I,fs),e(c,hs),e(c,A),e(A,Te),Te.innerHTML=Ko,e(A,bs),e(A,ee),e(ee,ae),e(ae,$e),e($e,nt),e(ae,ws),e(ae,Ne),Ne.innerHTML=Qo,e(ee,ms),e(ee,te),e(te,Es),e(te,Sa),e(Sa,_s),e(te,gs),e(A,Ms),e(A,Le),Le.innerHTML=Xo,e(c,Ds),e(c,se),e(se,Cs),e(se,Ta),e(Ta,Ie),e(Ie,Ps),e(se,Rs),e(c,ys),e(c,O),e(O,Ge),Ge.innerHTML=Zo,e(O,As),e(O,ne),e(ne,oe),e(oe,Fe),e(Fe,ot),e(oe,Os),e(oe,Be),Be.innerHTML=xo,e(ne,Ws),e(ne,G),e(G,Hs),e(G,Na),e(Na,je),e(je,Ss),e(G,Ts),e(G,La),e(La,$s),e(G,Ns),e(O,Ls),e(O,Ve),Ve.innerHTML=el,e(c,Is),e(c,le),e(le,Gs),e(le,Ia),e(Ia,Ue),e(Ue,Fs),e(le,Bs),e(c,js),e(c,W),e(W,Ye),Ye.innerHTML=al,e(W,Vs),e(W,pe),e(pe,ce),e(ce,qe),e(qe,lt),e(ce,Us),e(ce,ze),ze.innerHTML=tl,e(pe,Ys),e(pe,g),e(g,qs),e(g,Fa),e(Fa,Je),e(Je,zs),e(g,Js),e(g,Ba),e(Ba,Ke),e(Ke,Ks),e(g,Qs),e(g,ja),e(ja,Xs),e(g,Zs),e(g,Va),e(Va,xs),e(g,en),e(W,an),e(W,Qe),Qe.innerHTML=sl,e(c,tn),e(c,re),e(re,sn),e(re,Ua),e(Ua,Xe),e(Xe,nn),e(re,on),e(c,ln),e(c,Ze),Ze.innerHTML=nl,e(c,pn),e(c,Y),e(Y,ue),e(ue,ie),e(ie,xe),e(xe,pt),e(ie,cn),e(ie,ea),ea.innerHTML=ol,e(ue,rn),e(ue,F),e(F,un),e(F,qa),e(qa,aa),e(aa,kn),e(F,dn),e(F,za),e(za,vn),e(F,fn),e(Y,hn),e(Y,ta),ta.innerHTML=ll,e(c,bn),e(c,ke),e(ke,wn),e(ke,Ja),e(Ja,sa),e(sa,mn),e(ke,En),e(c,_n),e(c,H),e(H,na),na.innerHTML=pl,e(H,gn),e(H,de),e(de,ve),e(ve,oa),e(oa,ct),e(ve,Mn),e(ve,la),la.innerHTML=cl,e(de,Dn),e(de,M),e(M,Cn),e(M,Qa),e(Qa,Pn),e(M,Rn),e(M,Xa),e(Xa,yn),e(M,An),e(M,Za),e(Za,On),e(M,Wn),e(M,xa),e(xa,Hn),e(M,Sn),e(H,Tn),e(H,pa),pa.innerHTML=rl,e(c,$n),e(c,Nn),e(c,Ln),e(c,ca),e(ca,et),e(et,ra),e(ra,In),S=!0,Gn||(jn=Il(we,"click",k[15]),Gn=!0)},p(d,[r]){(!S||r&1)&&Ma!==(Ma=d[0].get("a")+"")&&Ee(tt,Ma),r&1&&D(R,"--hue",d[14](d[0].get("a")),!1),(!S||r&2)&&Ra!==(Ra=d[1].get("a")+"")&&Ee(st,Ra),r&2&&D(y,"--hue",d[14](d[1].get("a")),!1);const me={};r&131072&&(me.$$scope={dirty:r,ctx:d}),x.$set(me),(!S||r&16)&&Ha!==(Ha=d[4].value.get("a")+"")&&Ee(nt,Ha),r&16&&D(A,"--hue",d[14](d[4].value.get("a")),!1),(!S||r&32)&&$a!==($a=d[5].value.get("a")+"")&&Ee(ot,$a),r&32&&D(O,"--hue",d[14](d[5].value.get("a")),!1),(!S||r&64)&&Ga!==(Ga=d[6].value.get("a")+"")&&Ee(lt,Ga),r&64&&D(W,"--hue",d[14](d[6].value.get("a")),!1),(!S||r&4)&&Ya!==(Ya=d[2].value.get("a")+"")&&Ee(pt,Ya),r&4&&D(Y,"--hue",d[14](d[2].value.get("a")),!1),(!S||r&8)&&Ka!==(Ka=d[3].value.get("a")+"")&&Ee(ct,Ka),r&8&&D(H,"--hue",d[14](d[3].value.get("a")),!1)},i(d){S||(Gl(x.$$.fragment,d),S=!0)},o(d){Fl(x.$$.fragment,d),S=!1},d(d){d&&a(c),Bl(x),Gn=!1,jn()}}}function vp(k,c,f){let h,E,_,b,m,C,ge;const T=[["a",1]],P=Ht(new Map(T));_e(k,P,v=>f(0,h=v));const V=Ht(new Map(T));_e(k,V,v=>f(1,E=v));const Me=jl(P,v=>({value:v}));_e(k,Me,v=>f(4,m=v));const fe=Bn(new Map(T));_e(k,fe,v=>f(5,C=v));const $=Ul(new Map(T));_e(k,$,v=>f(6,ge=v));const he=Bn(new Map(T));_e(k,he,v=>f(2,_=v));const be=Bn(new Map(T));return _e(k,be,v=>f(3,b=v)),[h,E,_,b,m,C,ge,P,V,Me,fe,$,he,be,v=>v*37+"",()=>{h.set("a",h.get("a")+1),P.set(h),E.set("a",E.get("a")+1),Vl(V,E=new Map(E),E),fe.mutate(U=>{U.set("a",U.get("a")+1)}),$.mutate(U=>{U.set("a",U.get("a")+1)}),_.value.set("a",_.value.get("a")+1),he.mutate();const v=new Map(b.value);v.set("a",v.get("a")+1),be.swap(v)}]}class hp extends Wl{constructor(c){super();Hl(this,c,vp,dp,Sl,{})}}export{hp as default};
